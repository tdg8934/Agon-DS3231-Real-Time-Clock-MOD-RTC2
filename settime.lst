PC     Output      Line
040000             0001   ;
040000             0002   ; Title:        settime
040000             0003   ; Author:       Richard Turnnidge 2024
040000             0004   ; A MOSlet to set the time of a RTC module
040000             0005   ;
040000             0006   ; Usage:
040000             0007   ;         *settime seconds minutes hours day date month year
040000             0008   ;
040000             0009   ;   eg.    *settime 0 23 18 2 21 9 24
040000             0010   
040000             0011       include "myMacros.inc"
040000             0001*  ; ---------------------------------------------
040000             0002*  ;
040000             0003*  ;	SOME USEFUL MACROS
040000             0004*  ;
040000             0005*  ; ---------------------------------------------
040000             0006*  
040000             0007*  	macro CLS
040000             0008*  	ld a, 12
040000             0009*          rst.lil $10
040000             0010*  	endmacro
040000             0011*  
040000             0012*  	macro CLG
040000             0013*  	ld a, 16
040000             0014*  	rst.lil $10
040000             0015*  	endmacro
040000             0016*  
040000             0017*  	macro SET_COLOUR value
040000             0018*          ld a, 17
040000             0019*          rst.lil $10
040000             0020*          ld a, value
040000             0021*          rst.lil $10
040000             0022*  	endmacro
040000             0023*  
040000             0024*  	macro SET_BG_COLOUR value
040000             0025*          ld a, 17
040000             0026*  	rst.lil $10
040000             0027*          ld a, value
040000             0028*          add a, 128
040000             0029*          rst.lil $10
040000             0030*  	endmacro
040000             0031*  
040000             0032*  	macro TAB_TO x,y
040000             0033*          ld a, 31
040000             0034*          rst.lil $10
040000             0035*          ld a, x
040000             0036*          rst.lil $10
040000             0037*          ld a, y
040000             0038*          rst.lil $10
040000             0039*  	endmacro
040000             0040*  
040000             0041*  	macro SET_MODE mode
040000             0042*          ld a, 22
040000             0043*          rst.lil $10
040000             0044*          ld a, mode
040000             0045*          rst.lil $10
040000             0046*          ld a, mode
040000             0047*          rst.lil $10
040000             0048*  	endmacro
040000             0049*  
040000             0050*  	macro MOSCALL arg1
040000             0051*          ld a, arg1
040000             0052*          rst.lil $08
040000             0053*  	endmacro
040000             0054*  
040000             0055*          macro SET_MODE_GCOL mode,gcolour
040000             0056*          ld a, 18
040000             0057*          rst.lil $10
040000             0058*          ld a, mode
040000             0059*          rst.lil $10
040000             0060*          ld a, gcolour
040000             0061*          rst.lil $10
040000             0062*          endmacro
040000             0063*  
040000             0064*          macro NON_SCALED_GRAPHICS
040000             0065*          ld a, 0
040000             0066*          rst.lil $10
040000             0067*          ld a, 192
040000             0068*          rst.lil $10
040000             0069*          ld a, 0
040000             0070*          rst.lil $10
040000             0071*          endmacro
040000             0072*  
040000             0012   
040000             0013       .assume adl=1   ; We start up in full 24bit mode, allowing full memory access and 24-bit wide registers
040000             0014       .org $0B0000    ; This program assembles to MOSlet RAm area
0B0000             0015   
0B0000             0016   
0B0000 C3 E2 00 0B 0017       jp start        ; skip headers
0B0004             0018   
0B0004             0019   ; Quark MOS header
0B0004 FF FF FF FF 0020       .align 64       ; Quark MOS expects programs that it LOADs,to have a specific signature
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0040             0021                       ; Starting from decimal 64 onwards
0B0040 4D 4F 53    0022       .db "MOS"       ; MOS header 'magic' characters
0B0043 00          0023       .db 00h         ; MOS header version 0 - the only in existence currently afaik
0B0044 01          0024       .db 01h         ; Flag for run mode (0: Z80, 1: ADL) - We start up in ADL mode here
0B0045             0025   
0B0045 73 65 74 74 0026   _exec_name:     .DB  "settime.bin", 0      ; The executable name, only used in argv
       69 6D 65 2E 
       62 69 6E 00 
0B0051             0027   argv_ptrs_max:      EQU 16          ; Maximum number of arguments allowed in argv
0B0051             0028   
0B0051             0029       include "delay_routines.asm"
0B0051             0001*  ; ---------------------------------------------
0B0051             0002*  ;
0B0051             0003*  ;	DELAY ROUTINES
0B0051             0004*  ;
0B0051             0005*  ; ---------------------------------------------
0B0051             0006*  
0B0051             0007*  ; routine waits a fixed time, then returns
0B0051             0008*  
0B0051             0009*  multiPurposeDelay:
0B0051 C5          0010*  	push bc
0B0052             0011*  
0B0052             0012*  				; arrive with A =  the delay byte. One bit to be set only.
0B0052 47          0013*  	ld b, a
0B0053             0014*  	MOSCALL $08             ; get IX pointer to sysvars
0B0053 3E 08       0001*M         ld a, arg1
0B0055 5B CF       0002*M         rst.lil $08
0B0057             0015*  
0B0057             0016*  waitLoop:
0B0057             0017*  
0B0057 DD 7E 00    0018*  	ld a, (ix + 0)          ; ix+0h is lowest byte of clock timer
0B005A             0019*  
0B005A             0020*  				; need to check if bit set is same as last time we checked.
0B005A             0021*  				;   bit 0 - changes 128 times per second
0B005A             0022*  				;   bit 1 - changes 64 times per second
0B005A             0023*  				;   bit 2 - changes 32 times per second
0B005A             0024*  				;   bit 3 - changes 16 times per second
0B005A             0025*  
0B005A             0026*  				;   bit 4 - changes 8 times per second
0B005A             0027*  				;   bit 5 - changes 4 times per second
0B005A             0028*  				;   bit 6 - changes 2 times per second
0B005A             0029*  				;   bit 7 - changes 1 times per second
0B005A             0030*  				; eg. and 00000010b           ; check 1 bit only
0B005A A0          0031*  	and b
0B005B 4F          0032*  	ld c,a
0B005C 3A 6A 00 0B 0033*     	ld a, (oldTimeStamp)
0B0060 B9          0034*    	cp c                    ; is A same as last value?
0B0061 28 F4       0035*  	jr z, waitLoop   	; loop here if it is
0B0063 79          0036*   	ld a, c
0B0064 32 6A 00 0B 0037*   	ld (oldTimeStamp), a    ; set new value
0B0068             0038*  
0B0068 C1          0039*   	pop bc
0B0069 C9          0040*   	ret
0B006A             0041*  
0B006A 00          0042*  oldTimeStamp:   .db 00h
0B006B             0043*  
0B006B             0044*  ; ---------------------------------------------
0B006B             0045*  
0B006B             0046*  miniDelay:
0B006B C5          0047*  	push bc
0B006C 01 00 00 00 0048*  	ld bc, 0
0B0070 06 0A       0049*  	ld b,10
0B0072             0050*  miniLoop:
0B0072             0051*  
0B0072 10 FE       0052*  	djnz miniLoop
0B0074 C1          0053*  	pop bc
0B0075 C9          0054*  	ret
0B0076             0055*  
0B0076             0056*  
0B0076             0030       include "debug_routines.asm"
0B0076             0001*  ; ---------------------------------------------
0B0076             0002*  ;
0B0076             0003*  ;	DEBUG ROUTINES
0B0076             0004*  ;
0B0076             0005*  ; ---------------------------------------------
0B0076             0006*  
0B0076             0007*  
0B0076             0008*  ; debugDec:			; debug A to screen as 3 char string at pos BC
0B0076             0009*  ;         push af
0B0076             0010*  
0B0076             0011*  ; 	ld a, 31		; TAB at x,y
0B0076             0012*  ; 	rst.lil $10
0B0076             0013*  ; 	ld a, b			; x=b
0B0076             0014*  ; 	rst.lil $10
0B0076             0015*  ; 	ld a,c			; y=c
0B0076             0016*  ; 	rst.lil $10		; put tab at BC position
0B0076             0017*  ;         ld a, 48
0B0076             0018*  ;         ld (answer),a
0B0076             0019*  ;         ld (answer+1),a
0B0076             0020*  ;         ld (answer+2),a		; reset to default before starting
0B0076             0021*  ; ;is it bigger than 200?
0B0076             0022*  ; 	pop af
0B0076             0023*  
0B0076             0024*  ;         ld (base),a		; save
0B0076             0025*  
0B0076             0026*  ;         cp 199
0B0076             0027*  ; 	jr c,_under200		; not 200+
0B0076             0028*  ; 	sub a, 200
0B0076             0029*  ; 	ld (base),a		; sub 200 and save
0B0076             0030*  
0B0076             0031*  ; 	ld a, 50		; 2 in ascii
0B0076             0032*  ; 	ld (answer),a
0B0076             0033*  ; 	jr _under100
0B0076             0034*  
0B0076             0035*  ; _under200:
0B0076             0036*  ; 	cp 99
0B0076             0037*  ; 	jr c,_under100		; not 200+
0B0076             0038*  ; 	sub a, 100
0B0076             0039*  ; 	ld (base),a		; sub 200 and save
0B0076             0040*  
0B0076             0041*  ; 	ld a, 49		; 1 in ascii
0B0076             0042*  ; 	ld (answer),a
0B0076             0043*  ; 	jr _under100
0B0076             0044*  
0B0076             0045*  ; _under100:
0B0076             0046*  ; 	ld a, (base)
0B0076             0047*  ; 	ld c, a
0B0076             0048*  ; 	ld d, 10
0B0076             0049*  ;         call C_Div_D
0B0076             0050*  
0B0076             0051*  ; 	add a, 48
0B0076             0052*  ; 	ld (answer + 2),a
0B0076             0053*  
0B0076             0054*  ; 	ld a, c
0B0076             0055*  ; 	add a, 48
0B0076             0056*  ; 	ld (answer + 1),a
0B0076             0057*  
0B0076             0058*  ; 	ld hl, debugOut		; address of string to use
0B0076             0059*  ; 	ld bc, endDebugOut - debugOut ; length of string
0B0076             0060*  ; 	rst.lil $18
0B0076             0061*  ; 	ret
0B0076             0062*  
0B0076             0063*  ; debugOut:
0B0076             0064*  ; answer:		.db "000"	; string to output
0B0076             0065*  ; endDebugOut:
0B0076             0066*  
0B0076             0067*  ; base:		.db 0		; used in calculations
0B0076             0068*  
0B0076             0069*  
0B0076             0070*  ; ---------------------------------------------
0B0076             0071*  
0B0076             0072*  debugA:				; debug A to screen as HEX byte pair at pos BC
0B0076 F5          0073*  	push af
0B0077 32 B1 00 0B 0074*  	ld (debug_char), a	; store A
0B007B             0075*  				; first, print 'A=' at TAB 36,0
0B007B 3E 1F       0076*  	ld a, 31		; TAB at x,y
0B007D 5B D7       0077*  	rst.lil $10
0B007F 78          0078*  	ld a, b			; x=b
0B0080 5B D7       0079*  	rst.lil $10
0B0082 79          0080*  	ld a, c			; y=c
0B0083 5B D7       0081*  	rst.lil $10		; put tab at BC position
0B0085             0082*  
0B0085 3A B1 00 0B 0083*  	ld a, (debug_char)	; get A from store, then split into two nibbles
0B0089 E6 F0       0084*  	and 11110000b		; get higher nibble
0B008B 1F          0085*  	rra
0B008C 1F          0086*  	rra
0B008D 1F          0087*  	rra
0B008E 1F          0088*  	rra			; move across to lower nibble
0B008F C6 30       0089*  	add a,48		; increase to ascii code range 0-9
0B0091 FE 3A       0090*  	cp 58			; is A less than 10? (58+)
0B0093 38 02       0091*  	jr c, nextbd1		; carry on if less
0B0095 C6 07       0092*  	add a, 7		; add to get 'A' char if larger than 10
0B0097             0093*  nextbd1:
0B0097 5B D7       0094*  	rst.lil $10		; print the A char
0B0099             0095*  
0B0099 3A B1 00 0B 0096*  	ld a, (debug_char)	; get A back again
0B009D E6 0F       0097*  	and 00001111b		; now just get lower nibble
0B009F C6 30       0098*  	add a,48		; increase to ascii code range 0-9
0B00A1 FE 3A       0099*  	cp 58			; is A less than 10 (58+)
0B00A3 DA A9 00 0B 0100*  	jp c, nextbd2		; carry on if less
0B00A7 C6 07       0101*  	add a, 7		; add to get 'A' char if larger than 10
0B00A9             0102*  nextbd2:
0B00A9 5B D7       0103*  	rst.lil $10		; print the A char
0B00AB             0104*  
0B00AB 3A B1 00 0B 0105*  	ld a, (debug_char)
0B00AF F1          0106*  	pop af
0B00B0 C9          0107*  	ret			; head back
0B00B1             0108*  
0B00B1 00          0109*  debug_char: 	.db 0
0B00B2             0110*  
0B00B2             0111*  
0B00B2             0112*  ; ---------------------------------------------
0B00B2             0113*  
0B00B2             0114*  printBin:
0B00B2             0115*  				; take A as number and print out as binary, B,C as X,Y position
0B00B2             0116*  				; take D as number of bits to do
0B00B2 F5          0117*  	push af
0B00B3             0118*  
0B00B3 3E 1F       0119*  	ld a, 31		; TAB at x,y
0B00B5 5B D7       0120*  	rst.lil $10
0B00B7 78          0121*  	ld a, b			; x=b
0B00B8 5B D7       0122*  	rst.lil $10
0B00BA 79          0123*  	ld a,c			; y=c
0B00BB 5B D7       0124*  	rst.lil $10		; put tab at BC position
0B00BD             0125*  
0B00BD F1          0126*  	pop af
0B00BE             0127*  
0B00BE             0128*  
0B00BE 42          0129*  	ld b, d
0B00BF 21 DA 00 0B 0130*  	ld hl, binString
0B00C3             0131*  rpt:
0B00C3 36 30       0132*  	ld (hl), 48 	; ASCII 0 is 48, 1 is 49 ; reset first
0B00C5             0133*  
0B00C5 CB 7F       0134*  	bit 7, a
0B00C7 28 02       0135*  	jr z, nxt
0B00C9 36 31       0136*  	ld (hl), 49
0B00CB             0137*  nxt:
0B00CB 23          0138*  	inc hl	; next position in string
0B00CC 17          0139*  	rla
0B00CD 10 F4       0140*  	djnz rpt
0B00CF             0141*  
0B00CF             0142*  
0B00CF 21 DA 00 0B 0143*  	ld hl, printStr
0B00D3 01 08 00 00 0144*  	ld bc, endPrintStr - printStr
0B00D7             0145*  
0B00D7 5B DF       0146*  	rst.lil $18
0B00D9             0147*  
0B00D9             0148*  
0B00D9 C9          0149*  	ret
0B00DA             0150*  
0B00DA             0151*  			; print binary
0B00DA             0152*  printStr:
0B00DA 30 30 30 30 0153*  binString:	.db 	"00000000"
       30 30 30 30 
0B00E2             0154*  endPrintStr:
0B00E2             0031   ; ---------------------------------------------
0B00E2             0032   ;
0B00E2             0033   ;   INITIAL SETUP CODE HERE
0B00E2             0034   ;
0B00E2             0035   ; ---------------------------------------------
0B00E2             0036   
0B00E2             0037   start:                      ; Start code here
0B00E2 F5          0038       push af                 ; Push all registers to the stack
0B00E3 C5          0039       push bc
0B00E4 D5          0040       push de
0B00E5 DD E5       0041       push ix
0B00E7 FD E5       0042       push iy
0B00E9 ED 6E       0043       ld a, mb                ; grab current MB to restore when exiting
0B00EB F5          0044       push af
0B00EC AF          0045       xor a
0B00ED ED 6D       0046       ld mb, a                ; put 0 into MB
0B00EF             0047   
0B00EF             0048   
0B00EF DD 21 12 03 0049       LD IX, argv_ptrs       ; The argv array pointer address
       0B          
0B00F4 DD E5       0050       PUSH IX
0B00F6 CD 5F 02 0B 0051       CALL _parse_params     ; Parse the parameters
0B00FA DD E1       0052       POP IX                 ; IX: argv
0B00FC 06 00       0053       LD B, 0                ;  C: argc
0B00FE 41          0054       LD B, C                ;  B: number of arguments
0B00FF 78          0055       ld a, b
0B0100 32 42 03 0B 0056       ld (numParams),a
0B0104             0057   
0B0104 FE 01       0058       cp 1
0B0106 CA 56 01 0B 0059       jp z, noParams
0B010A             0060   
0B010A             0061   ; now set the params
0B010A FD 21 83 03 0062       ld iy, PARAMS                   ; set IY to the address of first param
       0B          
0B010F 3D          0063       dec a
0B0110 47          0064       ld b, a
0B0111             0065   
0B0111 DD 21 12 03 0066       LD IX, argv_ptrs       ; The argv array pointer address
       0B          
0B0116 DD 23       0067       inc ix
0B0118 DD 23       0068       inc ix
0B011A DD 23       0069       inc ix
0B011C             0070   
0B011C             0071   paramLoop:
0B011C C5          0072       push bc
0B011D             0073   
0B011D             0074       ; get param #B
0B011D DD 17 00    0075       ld de, (ix)           ; address of first arg, is a 0 terminated string for the file
0B0120             0076   
0B0120 C5          0077       push bc
0B0121 CD 39 02 0B 0078       call string2bytePair
0B0125 C1          0079       pop bc
0B0126 FD 77 00    0080       ld (iy), a              ; store the byte
0B0129             0081   
0B0129 48          0082       ld c, b
0B012A 06 1E       0083       ld b, 30
0B012C CD 76 00 0B 0084       call debugA
0B0130             0085   
0B0130 FD 23       0086       inc iy                  ; increase destination location
0B0132             0087   
0B0132 DD 23       0088       inc ix
0B0134 DD 23       0089       inc ix
0B0136 DD 23       0090       inc ix                  ; increase three address bytes, as three used for each pointer
0B0138             0091   
0B0138 C1          0092       pop bc
0B0139 10 E1       0093       djnz paramLoop          ; go round B times for data we want to store,
0B013B             0094                               ; in the order of: hours minutes seconds day month year
0B013B             0095   
0B013B CD 62 01 0B 0096       call open_i2c
0B013F             0097   
0B013F CD 69 01 0B 0098       call writeTimeData
0B0143             0099   
0B0143 CD 34 02 0B 0100       call close_i2c
0B0147             0101   
0B0147             0102   now_exit:
0B0147             0103                               ; Cleanup stack, prepare for return to MOS
0B0147 F1          0104       pop af
0B0148 ED 6D       0105       ld mb, a                ; restore MB
0B014A FD E1       0106       pop iy                  ; Pop all registers back from the stack
0B014C DD E1       0107       pop ix
0B014E D1          0108       pop de
0B014F C1          0109       pop bc
0B0150 F1          0110       pop af
0B0151 21 00 00 00 0111       ld hl,0                 ; Load the MOS API return code (0) for no errors.
0B0155             0112   
0B0155 C9          0113       ret                     ; Return to MOS
0B0156             0114   
0B0156             0115   
0B0156             0116   noParams:
0B0156 21 B3 02 0B 0117       ld hl, errMSG
0B015A CD 57 02 0B 0118       call PRSTR
0B015E             0119   
0B015E C3 47 01 0B 0120       jp now_exit
0B0162             0121   
0B0162             0122   ; ------------------
0B0162             0123   
0B0162             0124   open_i2c:
0B0162             0125   
0B0162 0E 03       0126       ld c, 3                     ; making assumption based on Jeroen's code
0B0164             0127       MOSCALL $1F                 ; open i2c
0B0164 3E 1F       0001M          ld a, arg1
0B0166 5B CF       0002M          rst.lil $08
0B0168             0128   
0B0168 C9          0129      ret
0B0169             0130   
0B0169             0131   ; ------------------
0B0169             0132   
0B0169             0133   writeTimeData:
0B0169             0134   ;   write to Address Pointer register and data buffer
0B0169             0135   ;   this section opens i2c and sets the default time
0B0169             0136   
0B0169 FD 21 83 03 0137       ld iy, PARAMS                   ; set IY to the address of first param
       0B          
0B016E             0138   
0B016E             0139   ;   set seconds
0B016E             0140   
0B016E 0E 68       0141       ld c, $68               ; i2c address ($68)
0B0170 06 02       0142       ld b, 2                 ; number of bytes to send
0B0172 21 63 03 0B 0143       ld hl, i2c_write_buffer
0B0176             0144   
0B0176 36 00       0145       ld (hl), $00            ; 1st byte ($00) points to SECONDS address reg
0B0178 23          0146       inc hl
0B0179 FD 7E 00    0147       ld a, (iy)
0B017C 77          0148       ld (hl), a              ; 2nd byte represents 47 seconds in BCD format
0B017D 21 63 03 0B 0149       ld hl, i2c_write_buffer
0B0181             0150       MOSCALL $21
0B0181 3E 21       0001M          ld a, arg1
0B0183 5B CF       0002M          rst.lil $08
0B0185             0151   
0B0185             0152   ;   set minutes
0B0185             0153   
0B0185 3E 02       0154       ld a, 00000010b
0B0187 CD 51 00 0B 0155       call multiPurposeDelay
0B018B             0156   
0B018B 0E 68       0157       ld c, $68               ; i2c address ($68)
0B018D 06 02       0158       ld b, 2                 ; number of bytes to send
0B018F 21 63 03 0B 0159       ld hl, i2c_write_buffer
0B0193             0160   
0B0193 36 01       0161       ld (hl), $01            ; 1st byte ($01) points to MINUTES address reg
0B0195 23          0162       inc hl
0B0196 FD 7E 01    0163       ld a, (iy +1)
0B0199 77          0164       ld (hl), a              ; 2nd byte represents 59 minutes in BCD format
0B019A 21 63 03 0B 0165       ld hl, i2c_write_buffer
0B019E             0166       MOSCALL $21
0B019E 3E 21       0001M          ld a, arg1
0B01A0 5B CF       0002M          rst.lil $08
0B01A2             0167   
0B01A2             0168   ;   set hours
0B01A2             0169   
0B01A2 3E 02       0170       ld a, 00000010b
0B01A4 CD 51 00 0B 0171       call multiPurposeDelay
0B01A8             0172   
0B01A8 0E 68       0173       ld c, $68               ; i2c address ($68)
0B01AA 06 02       0174       ld b, 2                 ; number of bytes to send
0B01AC 21 63 03 0B 0175       ld hl, i2c_write_buffer
0B01B0             0176   
0B01B0 36 02       0177       ld (hl), $02            ; 1st byte ($02) points to HOURS address reg
0B01B2 23          0178       inc hl
0B01B3 FD 7E 02    0179       ld a, (iy + 2)
0B01B6 77          0180       ld (hl), a              ; 2nd byte represents 12 hours in BCD format
0B01B7 21 63 03 0B 0181       ld hl, i2c_write_buffer
0B01BB             0182       MOSCALL $21
0B01BB 3E 21       0001M          ld a, arg1
0B01BD 5B CF       0002M          rst.lil $08
0B01BF             0183   
0B01BF             0184   
0B01BF             0185   ;   set day of week
0B01BF             0186   
0B01BF 3E 02       0187       ld a, 00000010b
0B01C1 CD 51 00 0B 0188       call multiPurposeDelay
0B01C5             0189   
0B01C5 0E 68       0190       ld c, $68               ; i2c address ($68)
0B01C7 06 02       0191       ld b, 2                 ; number of bytes to send
0B01C9 21 63 03 0B 0192       ld hl, i2c_write_buffer
0B01CD             0193   
0B01CD 36 03       0194       ld (hl), $03            ; 1st byte ($03) points to DAY address reg
0B01CF 23          0195       inc hl
0B01D0 FD 7E 03    0196       ld a, (iy + 3)
0B01D3 77          0197       ld (hl), a              ; 2nd byte represents the 2nd day/week in BCD format
0B01D4 21 63 03 0B 0198       ld hl, i2c_write_buffer
0B01D8             0199       MOSCALL $21
0B01D8 3E 21       0001M          ld a, arg1
0B01DA 5B CF       0002M          rst.lil $08
0B01DC             0200   
0B01DC             0201   ;   set day date
0B01DC             0202   
0B01DC 3E 02       0203       ld a, 00000010b
0B01DE CD 51 00 0B 0204       call multiPurposeDelay
0B01E2             0205   
0B01E2 0E 68       0206       ld c, $68               ; i2c address ($68)
0B01E4 06 02       0207       ld b, 2                 ; number of bytes to send
0B01E6 21 63 03 0B 0208       ld hl, i2c_write_buffer
0B01EA             0209   
0B01EA 36 04       0210       ld (hl), $04            ; 1st byte ($04) points to DATE address reg
0B01EC 23          0211       inc hl
0B01ED FD 7E 04    0212       ld a, (iy + 4)
0B01F0 77          0213       ld (hl), a              ; 2nd byte represents the 27th day/month in BCD format
0B01F1 21 63 03 0B 0214       ld hl, i2c_write_buffer
0B01F5             0215       MOSCALL $21
0B01F5 3E 21       0001M          ld a, arg1
0B01F7 5B CF       0002M          rst.lil $08
0B01F9             0216   
0B01F9             0217   ;   set month
0B01F9             0218   
0B01F9 3E 02       0219       ld a, 00000010b
0B01FB CD 51 00 0B 0220       call multiPurposeDelay
0B01FF             0221   
0B01FF 0E 68       0222       ld c, $68               ; i2c address ($68)
0B0201 06 02       0223       ld b, 2                 ; number of bytes to send
0B0203 21 63 03 0B 0224       ld hl, i2c_write_buffer
0B0207             0225   
0B0207 36 05       0226       ld (hl), $05            ; 1st byte ($05) points to MONTH address reg
0B0209 23          0227       inc hl
0B020A FD 7E 05    0228       ld a, (iy + 5)
0B020D 77          0229       ld (hl), a              ; 2nd byte represents the 10th month in BCD format
0B020E 21 63 03 0B 0230       ld hl, i2c_write_buffer
0B0212             0231       MOSCALL $21
0B0212 3E 21       0001M          ld a, arg1
0B0214 5B CF       0002M          rst.lil $08
0B0216             0232   
0B0216             0233   ;   set year
0B0216             0234   
0B0216 3E 02       0235       ld a, 00000010b
0B0218 CD 51 00 0B 0236       call multiPurposeDelay
0B021C             0237   
0B021C 0E 68       0238       ld c, $68               ; i2c address ($68)
0B021E 06 02       0239       ld b, 2                 ; number of bytes to send
0B0220 21 63 03 0B 0240       ld hl, i2c_write_buffer
0B0224             0241   
0B0224 36 06       0242       ld (hl), $06            ; 1st byte ($06) points to YEAR address reg
0B0226 23          0243       inc hl
0B0227 FD 7E 06    0244        ld a, (iy + 6)
0B022A 77          0245       ld (hl), a              ; 2nd byte represents the 24th year in BCD format
0B022B 21 63 03 0B 0246       ld hl, i2c_write_buffer
0B022F             0247       MOSCALL $21
0B022F 3E 21       0001M          ld a, arg1
0B0231 5B CF       0002M          rst.lil $08
0B0233             0248   
0B0233             0249   
0B0233 C9          0250       ret
0B0234             0251   
0B0234             0252   ; ---------------------------------------------
0B0234             0253   
0B0234             0254   close_i2c:
0B0234             0255   
0B0234             0256       MOSCALL $20
0B0234 3E 20       0001M          ld a, arg1
0B0236 5B CF       0002M          rst.lil $08
0B0238             0257   
0B0238 C9          0258       ret
0B0239             0259   
0B0239             0260   ; ---------------------------------------------
0B0239             0261   
0B0239             0262   string2bytePair:
0B0239             0263   
0B0239             0264   ; takes pointer to a string (0-99) and converts to a BCD single byte of two nibble values
0B0239             0265   
0B0239             0266   ; de = pointer to ASCII number
0B0239             0267   ; a = result
0B0239             0268   ; b and c are the two start chars
0B0239             0269   
0B0239             0270   
0B0239             0271   
0B0239 1A          0272       ld a, (de)      ; get first char
0B023A 47          0273       ld b, a         ; put it into B
0B023B 13          0274       inc de          ; inc de to next pos
0B023C 1A          0275       ld a, (de)      ; get the char
0B023D 4F          0276       ld c, a         ; put it into c
0B023E             0277   
0B023E FE 00       0278       cp 0        ; check if second char for a zero termination
0B0240 20 03       0279       jr nz, c1   ; jp if not, ie we got pair of chars
0B0242             0280   
0B0242 48          0281       ld c, b     ; put first char into second char
0B0243 06 30       0282       ld b, '0'   ; and put leading 0 into first char
0B0245             0283   
0B0245             0284   c1:
0B0245 79          0285       ld a, c     ; get second char
0B0246 D6 30       0286       sub 48      ; convert from char to value
0B0248 4F          0287       ld c, a     ; store it back into C
0B0249             0288   
0B0249 78          0289       ld a, b     ; get first char
0B024A D6 30       0290       sub 48      ; convert from char to value
0B024C             0291   
0B024C B7          0292       or a        ; clear any flags
0B024D             0293   
0B024D CB 27       0294       sla a
0B024F CB 27       0295       sla a
0B0251 CB 27       0296       sla a
0B0253 CB 27       0297       sla a       ; move left 4 bits
0B0255             0298   
0B0255 B1          0299       or c        ; add the second nibble to it
0B0256             0300   
0B0256             0301   
0B0256 C9          0302       ret
0B0257             0303   
0B0257             0304   ; ---------------------------------------------
0B0257             0305   
0B0257             0306   PRSTR:                              ; Print a zero-terminated string
0B0257 7E          0307       LD A,(HL)
0B0258 B7          0308       OR A
0B0259 C8          0309       RET Z
0B025A 5B D7       0310       RST.LIL 10h
0B025C 23          0311       INC HL
0B025D 18 F8       0312       JR PRSTR
0B025F             0313   
0B025F             0314   ; ---------------------------------------------
0B025F             0315   ; Parse the parameter string into a C array
0B025F             0316   ; Parameters
0B025F             0317   ; - HL: Address of parameter string
0B025F             0318   ; - IX: Address for array pointer storage
0B025F             0319   ; Returns:
0B025F             0320   ; -  C: Number of parameters parsed
0B025F             0321   
0B025F             0322   _parse_params:
0B025F 01 45 00 0B 0323       LD  BC, _exec_name
0B0263 DD 0F 00    0324       LD  (IX+0), BC                  ; ARGV[0] = the executable name
0B0266 DD 23       0325       INC IX
0B0268 DD 23       0326       INC IX
0B026A DD 23       0327       INC IX
0B026C CD 98 02 0B 0328       CALL _skip_spaces               ; Skip HL past any leading spaces
0B0270             0329   
0B0270 01 01 00 00 0330       LD  BC, 1                       ; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0274 06 0F       0331       LD  B, argv_ptrs_max - 1        ; B: Maximum number of argv_ptrs
0B0276             0332   
0B0276             0333   _parse_params_1:
0B0276 C5          0334       PUSH BC                         ; Stack ARGC
0B0277 E5          0335       PUSH HL                         ; Stack start address of token
0B0278 CD 9F 02 0B 0336       CALL _get_token                 ; Get the next token
0B027C 79          0337       LD A, C                         ; A: Length of the token in characters
0B027D D1          0338       POP DE                          ; Start address of token (was in HL)
0B027E C1          0339       POP BC                          ; ARGC
0B027F B7          0340       OR A                            ; Check for A=0 (no token found) OR at end of string
0B0280 C8          0341       RET Z
0B0281             0342   
0B0281 DD 1F 00    0343       LD  (IX+0), DE                  ; Store the pointer to the token
0B0284 E5          0344       PUSH HL                         ; DE=HL
0B0285 D1          0345       POP DE
0B0286 CD 98 02 0B 0346       CALL    _skip_spaces            ; And skip HL past any spaces onto the next character
0B028A AF          0347       XOR A
0B028B 12          0348       LD (DE), A                      ; Zero-terminate the token
0B028C DD 23       0349       INC IX
0B028E DD 23       0350       INC IX
0B0290 DD 23       0351       INC IX                          ; Advance to next pointer position
0B0292 0C          0352       INC C                           ; Increment ARGC
0B0293 79          0353       LD  A, C                        ; Check for C >= A
0B0294 B8          0354       CP  B
0B0295 38 DF       0355       JR  C, _parse_params_1          ; And loop
0B0297 C9          0356       RET
0B0298             0357   
0B0298             0358   
0B0298             0359   ; ---------------------------------------------
0B0298             0360   
0B0298             0361   ; Skip spaces in the parameter string
0B0298             0362   ; Parameters:
0B0298             0363   ; - HL: Address of parameter string
0B0298             0364   ; Returns:
0B0298             0365   ; - HL: Address of next none-space character
0B0298             0366   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B0298             0367   
0B0298             0368   _skip_spaces:
0B0298 7E          0369           LD  A, (HL)                 ; Get the character from the parameter string
0B0299 FE 20       0370               CP  ' '                 ; Exit if not space
0B029B C0          0371               RET NZ
0B029C 23          0372               INC HL                  ; Advance to next character
0B029D 18 F9       0373               JR  _skip_spaces        ; Increment length
0B029F             0374   
0B029F             0375   
0B029F             0376   ; ---------------------------------------------
0B029F             0377   
0B029F             0378   ; Get the next token
0B029F             0379   ; Parameters:
0B029F             0380   ; - HL: Address of parameter string
0B029F             0381   ; Returns:
0B029F             0382   ; - HL: Address of first character after token
0B029F             0383   ; -  C: Length of token (in characters)
0B029F             0384   
0B029F             0385   _get_token:
0B029F 0E 00       0386       LD C, 0                         ; Initialise length
0B02A1             0387   nt:
0B02A1 7E          0388       LD A, (HL)                      ; Get the character from the parameter string
0B02A2 B7          0389       OR A                            ; Exit if 0 (end of parameter string in MOS)
0B02A3 C8          0390       RET Z
0B02A4 FE 0D       0391       CP 13                           ; Exit if CR (end of parameter string in BBC BASIC)
0B02A6 C8          0392       RET Z
0B02A7 FE 20       0393       CP ' '                          ; Exit if space (end of token)
0B02A9 C8          0394       RET Z
0B02AA 23          0395       INC HL                          ; Advance to next character
0B02AB 0C          0396       INC C                           ; Increment length
0B02AC 18 F3       0397       JR  nt
0B02AE             0398   
0B02AE             0399   ; ---------------------------------------------
0B02AE             0400   
0B02AE             0401   CLS:
0B02AE 3E 0C       0402       ld a, 12
0B02B0 5B D7       0403       rst.lil $10                     ; CLS
0B02B2 C9          0404       ret
0B02B3             0405   
0B02B3             0406   ; ---------------------------------------------
0B02B3             0407   ;
0B02B3             0408   ;   DATA
0B02B3             0409   ;
0B02B3             0410   ; ---------------------------------------------
0B02B3             0411   
0B02B3 53 6F 72 72 0412   errMSG:             .db "Sorry, wrong number of arguments.\r\nUse: settime seconds minutes hours day date month year\r\n",0
       79 2C 20 77 
       72 6F 6E 67 
       20 6E 75 6D 
       62 65 72 20 
       6F 66 20 61 
       72 67 75 6D 
       65 6E 74 73 
       2E 0D 0A 55 
       73 65 3A 20 
       73 65 74 74 
       69 6D 65 20 
       73 65 63 6F 
       6E 64 73 20 
       6D 69 6E 75 
       74 65 73 20 
       68 6F 75 72 
       73 20 64 61 
       79 20 64 61 
       74 65 20 6D 
       6F 6E 74 68 
       20 79 65 61 
       72 0D 0A 00 
0B030F 0D 0A 00    0413   LFCR:               .db "\r\n",0
0B0312 FF FF FF FF 0414   argv_ptrs:          .ds    48, 255        ; max 16 x 3 bytes each
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0342 00          0415   numParams:          .db 0
0B0343             0416   
0B0343             0417   
0B0343             0418   i2c_read_buffer:        ; i2c buffer space
0B0343 00 00 00 00 0419       .ds 32,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0363             0420   
0B0363             0421   i2c_write_buffer:
0B0363 00 00 00 00 0422       .ds 32,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0383             0423   
0B0383             0424   ;   store RTC values. receive data in this order
0B0383             0425   PARAMS:
0B0383             0426   
0B0383 00          0427   SECONDS:        .db     0
0B0384 00          0428   MINUTES:        .db     0
0B0385 00          0429   HOURS:          .db     0
0B0386             0430   
0B0386 00          0431   DAY:            .db     0
0B0387             0432   
0B0387 00          0433   DATE:           .db     0
0B0388 00          0434   MONTH:          .db     0
0B0389 00          0435   YEAR:           .db     0
0B038A             0436   
0B038A             0437   
0B038A             0438   ;   optional
0B038A             0439   
0B038A 00          0440   HOURSMODE:      .db 0
0B038B             0441   
0B038B             0442   
0B038B             0443   overrun:
0B038B 00 00 00 00 0444       .ds 32,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
